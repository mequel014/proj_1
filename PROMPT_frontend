Потоки фронта (как это использовать)
Регистрация по email:

POST /auth/request-signup с email — в лог сервера упадёт ссылка.
По ссылке (или фронт получает token из письма) вызвать POST /auth/complete-signup c token, password, username (optional).
Затем POST /auth/login с login (email или username) и password — получите access_token.
Персонажи:

GET /characters — список публичных.
GET /characters?mine=true — только мои (нужен токен).
POST /characters — создать персонажа (нужен токен).
PATCH /characters/{id} — редактировать (владелец или админ).
POST /characters/upload/photo — простой аплоад локально (вернёт photo_url).
Диалоги:

POST /dialogs/{character_id}/messages — отправить сообщение.
Если dialog_id в теле не указан — создастся новый диалог (системное сообщение = контекст).
Вернёт ответ ассистента и dialog_id (для продолжения).
GET /dialogs — список ваших диалогов.
GET /dialogs/{dialog_id}/messages — получить историю.
Админка:

GET /admin/stats — базовая статистика.
GET /admin/users — список пользователей.
GET /admin/users/{user_id} — детали пользователя (дата регистрации, созданные персонажи, «короткие» диалоги).
GET /admin/dialogs/{dialog_id} — сообщения диалога.
POST /characters/{id}/block — блокировка персонажа (админ).
POST /admin/users/{id}/block — блокировка пользователя.
Чтобы сделать кого-то админом, вручную поставьте is_admin=1 у пользователя (например, временно через SQLite-браузер или отдельным скриптом).

На фронтенде планируется следующий функционал:
- пользователь регистрируется по ссылке на почту
- Пользователь может создавать себе bio и описание
- логинится по логину и паролю (jwt токен)
- после того, как он заходит он видит карточки персонажей: фото, пол, имя, интересы (как теги), рейтинг (напр. 7.7, 9.9) 
- после нажатия на персонажа он переходит в окно чата, где строка ввода располагается внизу. Самое первое сообщение будет описывать контекст: обстановку, в которой находится персонаж, о чем он думает, и т.д.
- Когда пользователь пишет первое сообщение, начинается диалог, который сохраняется в базу данных
- Также пользователь может создавать персонажа: вводить фото, пол, имя, интересы (как теги), описание контекста, которое пишется в самом начале диалога, а также значок: private (может общаться только он) или public (могут видеть все)

В Админке 
- В главном меню суперпользователь видит всех пользователей, количество диалогов, количество созданных персонажей
- в детальном меню пользователя видно дату регистрации, список созданных персонажей, короткий список диалогов: дату, имя персонажа
- Если нажать на диалог из списка, откроется детальный диалог в виде чата
- Администратор должен иметь возможноть блокировать пользователя или отдельных персонажей

Мне нужен фронтенд под данный api
Функционал:
- пользователь регистрируется по ссылке на почту
- Пользователь может создавать себе bio и описание
- логинится по логину и паролю (jwt токен)
- после того, как он заходит он видит карточки персонажей: фото, пол, имя, интересы (как теги), рейтинг (напр. 7.7, 9.9) 
- после нажатия на персонажа он переходит в окно чата, где строка ввода располагается внизу. Самое первое сообщение будет описывать контекст: обстановку, в которой находится персонаж, о чем он думает, и т.д.
- Когда пользователь пишет первое сообщение, начинается диалог, который сохраняется в базу данных
- Также пользователь может создавать персонажа: вводить фото, пол, имя, интересы (как теги), описание контекста, которое пишется в самом начале диалога, а также значок: private (может общаться только он) или public (могут видеть все)

В Админке 
- В главном меню суперпользователь видит всех пользователей, количество диалогов, количество созданных персонажей
- в детальном меню пользователя видно дату регистрации, список созданных персонажей, короткий список диалогов: дату, имя персонажа
- Если нажать на диалог из списка, откроется детальный диалог в виде чата
- Администратор должен иметь возможноть блокировать пользователя или отдельных персонажей

Фронтенд на Nuxt3, pinia storage, composition api, .js вместо .ts
Стили: bulma.min.css в assets/css, также добавь custom.css и в самих компонентах добавляй <style scoped>, чтобы сделать привлекательный интерфейс, насколько это позволяет bulma
В каждом .vue пиши так: сначала <script setup></script>, затем <template></template>, затем стили, если они нужны

Сделай так, чтобы было удобно масштабировать и работать с проектом. Не используй сложных конструкций и библиотек.
Разделяй логику на компоненты, плагины, и т.д.

